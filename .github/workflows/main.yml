name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *" # 每天凌晨1点运行
  workflow_dispatch:
    inputs:
      force_update:
        description: '是否强制更新（忽略版本检查）'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有 Git 历史（必要，否则无法切换分支）

      - name: 设置环境
        run: |
          echo "REPO_URL=https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest" >> $GITHUB_ENV
          echo "TARGET_FILE=worker.zip" >> $GITHUB_ENV
          echo "VERSION_FILE=version.txt" >> $GITHUB_ENV
          echo "README_FILE=README.md" >> $GITHUB_ENV

      - name: 检查更新
        id: check_update
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub Token 认证
        run: |
          # 日志函数
          log() { echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"; }

          log "开始检查更新..."
          echo "changed=false" >> $GITHUB_OUTPUT # 默认未更新

          # 获取当前版本
          LOCAL_VERSION=$(cat $VERSION_FILE 2>/dev/null || echo "")
          log "当前版本: ${LOCAL_VERSION:-无}"

          # 获取最新 Release
          log "获取最新 Release 信息..."
          RESPONSE=$(curl -s --retry 3 -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" "$REPO_URL")
          if [ $? -ne 0 ]; then
            log "ERROR: 无法访问 GitHub API ($REPO_URL)"
            exit 1
          fi
          
          # 检查响应是否包含错误信息
          if echo "$RESPONSE" | jq -e '.message' > /dev/null; then
            log "ERROR: GitHub API 返回错误: $(echo "$RESPONSE" | jq -r '.message')"
            if echo "$RESPONSE" | jq -e '.documentation_url' > /dev/null; then
              log "Docs: $(echo "$RESPONSE" | jq -r '.documentation_url')"
            fi
            exit 1
          fi

          REMOTE_VERSION=$(echo "$RESPONSE" | jq -r '.tag_name')
          REMARK_BODY=$(echo "$RESPONSE" | jq -r '.body')
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name == "'"$TARGET_FILE"'") | .browser_download_url')

          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" == "null" ]; then
            log "ERROR: 未找到 $TARGET_FILE"
            exit 1
          fi
          log "最新版本: $REMOTE_VERSION"

          # 判断是否需要更新
          FORCE_UPDATE=${{ github.event.inputs.force_update || 'false' }}
          if [ "$LOCAL_VERSION" = "$REMOTE_VERSION" ] && [ "$FORCE_UPDATE" != "true" ]; then
            log "已是最新版本，无需更新"
            exit 0
          fi

          # 下载并更新
          log "下载 $TARGET_FILE..."
          wget -q -O "$TARGET_FILE" "$DOWNLOAD_URL"
          log "解压 $TARGET_FILE..."
          unzip -o "$TARGET_FILE"
          log "清理 $TARGET_FILE..."
          rm "$TARGET_FILE"
          echo "$REMOTE_VERSION" > $VERSION_FILE
          echo "$REMARK_BODY" > $README_FILE
          log "更新完成，新版本: $REMOTE_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$REMOTE_VERSION" >> $GITHUB_OUTPUT

      - name: 提交更新
        if: steps.check_update.outputs.changed == 'true' # 仅在更新成功时提交
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔄 自动同步 Worker 版本: ${{ steps.check_update.outputs.new_version || '未知' }}"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
